/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Waver, WaverInterface } from "../Waver";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NewWave",
    type: "event",
  },
  {
    inputs: [],
    name: "getWaves",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Waver.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWavesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastWavedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "wave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405262000033604051806060016040528060258152602001620013de602591396200005060201b620006601760201c565b606444426200004391906200019d565b166002819055506200027a565b620000f0816040516024016200006791906200015d565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620000f360201b60201c565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000620001298262000181565b6200013581856200018c565b93506200014781856020860162000204565b620001528162000269565b840191505092915050565b600060208201905081810360008301526200017981846200011c565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000620001aa82620001fa565b9150620001b783620001fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620001ef57620001ee6200023a565b5b828201905092915050565b6000819050919050565b60005b838110156200022457808201518184015260208101905062000207565b8381111562000234576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b611154806200028a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f6e378614610051578063449d46c01461006f578063a42a46631461008b578063a9d42f7e146100bb575b600080fd5b6100596100d9565b6040516100669190610d79565b60405180910390f35b61008960048036038101906100849190610a42565b610124565b005b6100a560048036038101906100a09190610a19565b6104f7565b6040516100b29190610d79565b60405180910390f35b6100c361050f565b6040516100d09190610c50565b60405180910390f35b600061011c6040518060400160405280601781526020017f5765206861766520256420746f74616c207761766573210000000000000000008152506001546106f9565b600154905090565b42600a600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101719190610e80565b106101b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a890610d59565b60405180910390fd5b42600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018060008282546102079190610e80565b9250508190555061024e6040518060400160405280601681526020017f257320776176656420772f206d657373616765202573000000000000000000008152503383610795565b600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061030d9291906108f9565b506040820151816002015550506064600254424461032b9190610e80565b6103359190610e80565b61033f9190610fb7565b6002819055506103866040518060400160405280601681526020017f52616e646f6d20232067656e6572617465643a202564000000000000000000008152506002546106f9565b6032600254116104a4576103cf6040518060400160405280600781526020017f257320776f6e210000000000000000000000000000000000000000000000000081525033610834565b6000655af3107a400090506104196040518060400160405280600a81526020017f25732062616c616e636500000000000000000000000000000000000000000000815250476106f9565b47811061045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290610d39565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104a1573d6000803e3d6000fd5b50505b3373ffffffffffffffffffffffffffffffffffffffff167f5f7e16dc676677766a70e9c5628aa6c54ddb8b6e5188e2ae1e1f17f1ffbea71642836040516104ec929190610d94565b60405180910390a250565b60036020528060005260406000206000915090505481565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561065757838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546105bc90610f54565b80601f01602080910402602001604051908101604052809291908181526020018280546105e890610f54565b80156106355780601f1061060a57610100808354040283529160200191610635565b820191906000526020600020905b81548152906001019060200180831161061857829003601f168201915b5050505050815260200160028201548152505081526020019060010190610533565b50505050905090565b6106f6816040516024016106749190610c72565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d0565b50565b610791828260405160240161070f929190610d09565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d0565b5050565b61082f8383836040516024016107ad93929190610cc4565b6040516020818303038152906040527fe0e9ad4f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d0565b505050565b6108cc828260405160240161084a929190610c94565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d0565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b82805461090590610f54565b90600052602060002090601f016020900481019282610927576000855561096e565b82601f1061094057805160ff191683800117855561096e565b8280016001018555821561096e579182015b8281111561096d578251825591602001919060010190610952565b5b50905061097b919061097f565b5090565b5b80821115610998576000816000905550600101610980565b5090565b60006109af6109aa84610de9565b610dc4565b9050828152602081018484840111156109c757600080fd5b6109d2848285610f12565b509392505050565b6000813590506109e981611107565b92915050565b600082601f830112610a0057600080fd5b8135610a1084826020860161099c565b91505092915050565b600060208284031215610a2b57600080fd5b6000610a39848285016109da565b91505092915050565b600060208284031215610a5457600080fd5b600082013567ffffffffffffffff811115610a6e57600080fd5b610a7a848285016109ef565b91505092915050565b6000610a8f8383610be2565b905092915050565b610aa081610ed6565b82525050565b610aaf81610ed6565b82525050565b6000610ac082610e2a565b610aca8185610e4d565b935083602082028501610adc85610e1a565b8060005b85811015610b185784840389528151610af98582610a83565b9450610b0483610e40565b925060208a01995050600181019050610ae0565b50829750879550505050505092915050565b6000610b3582610e35565b610b3f8185610e5e565b9350610b4f818560208601610f21565b610b58816110a4565b840191505092915050565b6000610b6e82610e35565b610b788185610e6f565b9350610b88818560208601610f21565b610b91816110a4565b840191505092915050565b6000610ba9601a83610e6f565b9150610bb4826110b5565b602082019050919050565b6000610bcc600f83610e6f565b9150610bd7826110de565b602082019050919050565b6000606083016000830151610bfa6000860182610a97565b5060208301518482036020860152610c128282610b2a565b9150506040830151610c276040860182610c32565b508091505092915050565b610c3b81610f08565b82525050565b610c4a81610f08565b82525050565b60006020820190508181036000830152610c6a8184610ab5565b905092915050565b60006020820190508181036000830152610c8c8184610b63565b905092915050565b60006040820190508181036000830152610cae8185610b63565b9050610cbd6020830184610aa6565b9392505050565b60006060820190508181036000830152610cde8186610b63565b9050610ced6020830185610aa6565b8181036040830152610cff8184610b63565b9050949350505050565b60006040820190508181036000830152610d238185610b63565b9050610d326020830184610c41565b9392505050565b60006020820190508181036000830152610d5281610b9c565b9050919050565b60006020820190508181036000830152610d7281610bbf565b9050919050565b6000602082019050610d8e6000830184610c41565b92915050565b6000604082019050610da96000830185610c41565b8181036020830152610dbb8184610b63565b90509392505050565b6000610dce610ddf565b9050610dda8282610f86565b919050565b6000604051905090565b600067ffffffffffffffff821115610e0457610e03611075565b5b610e0d826110a4565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610e8b82610f08565b9150610e9683610f08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ecb57610eca610fe8565b5b828201905092915050565b6000610ee182610ee8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610f3f578082015181840152602081019050610f24565b83811115610f4e576000848401525b50505050565b60006002820490506001821680610f6c57607f821691505b60208210811415610f8057610f7f611046565b5b50919050565b610f8f826110a4565b810181811067ffffffffffffffff82111715610fae57610fad611075565b5b80604052505050565b6000610fc282610f08565b9150610fcd83610f08565b925082610fdd57610fdc611017565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f206d6f7265206d6f6e657920746f20676976652061776179000000000000600082015250565b7f57616974203130207365636f6e64730000000000000000000000000000000000600082015250565b61111081610ed6565b811461111b57600080fd5b5056fea2646970667358221220226a63766be6983665c42741933483e0825d60ad40e75caa553b879f7b6e9ed764736f6c63430008010033596f20796f2c204920616d206120636f6e747261637420616e64204920616d20736d617274";

type WaverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WaverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Waver__factory extends ContractFactory {
  constructor(...args: WaverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Waver";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Waver> {
    return super.deploy(overrides || {}) as Promise<Waver>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Waver {
    return super.attach(address) as Waver;
  }
  connect(signer: Signer): Waver__factory {
    return super.connect(signer) as Waver__factory;
  }
  static readonly contractName: "Waver";
  public readonly contractName: "Waver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WaverInterface {
    return new utils.Interface(_abi) as WaverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Waver {
    return new Contract(address, _abi, signerOrProvider) as Waver;
  }
}
